// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`plugin Magic comment should remove only needed comments 1`] = `
"const load =
/* IMPORTANT! */
{
  resolved: {},

  chunkName() {
    return \\"moment\\";
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] !== true) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: () => import(
  /* webpackChunkName: \\"moment\\" */
  'moment'),

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\\"moment\\");
    }

    return eval('require.resolve')(\\"moment\\");
  }

};"
`;

exports[`plugin Magic comment should transpile arrow functions 1`] = `
"const load = {
  resolved: {},

  chunkName() {
    return \\"moment\\";
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] !== true) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: () => import(
  /* webpackChunkName: \\"moment\\" */
  'moment'),

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\\"moment\\");
    }

    return eval('require.resolve')(\\"moment\\");
  }

};"
`;

exports[`plugin Magic comment should transpile function expression 1`] = `
"const load = {
  resolved: {},

  chunkName() {
    return \\"moment\\";
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] !== true) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: function () {
    return import(
    /* webpackChunkName: \\"moment\\" */
    'moment');
  },

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\\"moment\\");
    }

    return eval('require.resolve')(\\"moment\\");
  }

};"
`;

exports[`plugin Magic comment should transpile shortand properties 1`] = `
"const obj = {
  load: {
    resolved: {},

    chunkName() {
      return \\"moment\\";
    },

    isReady(props) {
      const key = this.resolve(props);

      if (this.resolved[key] !== true) {
        return false;
      }

      if (typeof __webpack_modules__ !== 'undefined') {
        return !!__webpack_modules__[key];
      }

      return false;
    },

    importAsync: () => {
      return import(
      /* webpackChunkName: \\"moment\\" */
      'moment');
    },

    requireAsync(props) {
      const key = this.resolve(props);
      this.resolved[key] = false;
      return this.importAsync(props).then(resolved => {
        this.resolved[key] = true;
        return resolved;
      });
    },

    requireSync(props) {
      const id = this.resolve(props);

      if (typeof __webpack_require__ !== 'undefined') {
        return __webpack_require__(id);
      }

      return eval('module.require')(id);
    },

    resolve() {
      if (require.resolveWeak) {
        return require.resolveWeak(\\"moment\\");
      }

      return eval('require.resolve')(\\"moment\\");
    }

  }
};"
`;

exports[`plugin aggressive import should work with destructuration 1`] = `
"loadable({
  resolved: {},

  chunkName({
    foo
  }) {
    return \`\${foo}\`.replace(/[^a-zA-Z0-9_!§$()=\\\\-^°]+/g, \\"-\\");
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] !== true) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: ({
    foo
  }) => import(
  /* webpackChunkName: \\"[request]\\" */
  \`./\${foo}\`),

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve({
    foo
  }) {
    if (require.resolveWeak) {
      return require.resolveWeak(\`./\${foo}\`);
    }

    return eval('require.resolve')(\`./\${foo}\`);
  }

});"
`;

exports[`plugin aggressive import with "webpackChunkName" should keep it 1`] = `
"loadable({
  resolved: {},

  chunkName(props) {
    return \\"pages/\\" + props.path.replace(/[^a-zA-Z0-9_!§$()=\\\\-^°]+/g, \\"-\\");
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] !== true) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: props => import(
  /* webpackChunkName: \\"pages/[request]\\" */
  \`./pages/\${props.path}\`),

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve(props) {
    if (require.resolveWeak) {
      return require.resolveWeak(\`./pages/\${props.path}\`);
    }

    return eval('require.resolve')(\`./pages/\${props.path}\`);
  }

});"
`;

exports[`plugin aggressive import with "webpackChunkName" should replace it 1`] = `
"loadable({
  resolved: {},

  chunkName(props) {
    return \`\${props.foo}\`.replace(/[^a-zA-Z0-9_!§$()=\\\\-^°]+/g, \\"-\\");
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] !== true) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: props => import(
  /* webpackChunkName: \\"[request]\\" */
  \`./\${props.foo}\`),

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve(props) {
    if (require.resolveWeak) {
      return require.resolveWeak(\`./\${props.foo}\`);
    }

    return eval('require.resolve')(\`./\${props.foo}\`);
  }

});"
`;

exports[`plugin aggressive import without "webpackChunkName" should support complex request 1`] = `
"loadable({
  resolved: {},

  chunkName(props) {
    return \`dir-\${props.foo}-test\`.replace(/[^a-zA-Z0-9_!§$()=\\\\-^°]+/g, \\"-\\");
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] !== true) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: props => import(
  /* webpackChunkName: \\"dir-[request]\\" */
  \`./dir/\${props.foo}/test\`),

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve(props) {
    if (require.resolveWeak) {
      return require.resolveWeak(\`./dir/\${props.foo}/test\`);
    }

    return eval('require.resolve')(\`./dir/\${props.foo}/test\`);
  }

});"
`;

exports[`plugin aggressive import without "webpackChunkName" should support destructuring 1`] = `
"loadable({
  resolved: {},

  chunkName({
    foo
  }) {
    return \`dir-\${foo}-test\`.replace(/[^a-zA-Z0-9_!§$()=\\\\-^°]+/g, \\"-\\");
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] !== true) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: ({
    foo
  }) => import(
  /* webpackChunkName: \\"dir-[request]\\" */
  \`./dir/\${foo}/test\`),

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve({
    foo
  }) {
    if (require.resolveWeak) {
      return require.resolveWeak(\`./dir/\${foo}/test\`);
    }

    return eval('require.resolve')(\`./dir/\${foo}/test\`);
  }

});"
`;

exports[`plugin aggressive import without "webpackChunkName" should support simple request 1`] = `
"loadable({
  resolved: {},

  chunkName(props) {
    return \`\${props.foo}\`.replace(/[^a-zA-Z0-9_!§$()=\\\\-^°]+/g, \\"-\\");
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] !== true) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: props => import(
  /* webpackChunkName: \\"[request]\\" */
  \`./\${props.foo}\`),

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve(props) {
    if (require.resolveWeak) {
      return require.resolveWeak(\`./\${props.foo}\`);
    }

    return eval('require.resolve')(\`./\${props.foo}\`);
  }

});"
`;

exports[`plugin loadable.lib should be transpiled too 1`] = `
"loadable.lib({
  resolved: {},

  chunkName() {
    return \\"moment\\";
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] !== true) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: () => import(
  /* webpackChunkName: \\"moment\\" */
  'moment'),

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\\"moment\\");
    }

    return eval('require.resolve')(\\"moment\\");
  }

});"
`;

exports[`plugin simple import in a complex promise should work 1`] = `
"loadable({
  resolved: {},

  chunkName() {
    return \\"ModA\\";
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] !== true) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: () => timeout(import(
  /* webpackChunkName: \\"ModA\\" */
  './ModA'), 2000),

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\\"./ModA\\");
    }

    return eval('require.resolve')(\\"./ModA\\");
  }

});"
`;

exports[`plugin simple import should transform path into "chunk-friendly" name 1`] = `
"loadable({
  resolved: {},

  chunkName() {
    return \\"foo-bar\\";
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] !== true) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: () => import(
  /* webpackChunkName: \\"foo-bar\\" */
  '../foo/bar'),

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\\"../foo/bar\\");
    }

    return eval('require.resolve')(\\"../foo/bar\\");
  }

});"
`;

exports[`plugin simple import should work with * in name 1`] = `
"loadable({
  resolved: {},

  chunkName() {
    return \`foo\`.replace(/[^a-zA-Z0-9_!§$()=\\\\-^°]+/g, \\"-\\");
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] !== true) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: () => import(
  /* webpackChunkName: \\"foo\\" */
  \`./foo*\`),

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\`./foo*\`);
    }

    return eval('require.resolve')(\`./foo*\`);
  }

});"
`;

exports[`plugin simple import should work with + concatenation 1`] = `
"loadable({
  resolved: {},

  chunkName() {
    return \\"\\";
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] !== true) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: () => import(
  /* webpackChunkName: \\"\\" */
  './Mod' + 'A'),

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak('./Mod' + 'A');
    }

    return eval('require.resolve')('./Mod' + 'A');
  }

});"
`;

exports[`plugin simple import should work with template literal 1`] = `
"loadable({
  resolved: {},

  chunkName() {
    return \`ModA\`.replace(/[^a-zA-Z0-9_!§$()=\\\\-^°]+/g, \\"-\\");
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] !== true) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: () => import(
  /* webpackChunkName: \\"ModA\\" */
  \`./ModA\`),

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\`./ModA\`);
    }

    return eval('require.resolve')(\`./ModA\`);
  }

});"
`;

exports[`plugin simple import with "webpackChunkName" comment should use it 1`] = `
"loadable({
  resolved: {},

  chunkName() {
    return \\"ChunkA\\";
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] !== true) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: () => import(
  /* webpackChunkName: \\"ChunkA\\" */
  './ModA'),

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\\"./ModA\\");
    }

    return eval('require.resolve')(\\"./ModA\\");
  }

});"
`;

exports[`plugin simple import with "webpackChunkName" comment should use it even if comment is separated by "," 1`] = `
"loadable({
  resolved: {},

  chunkName() {
    return \\"ChunkA\\";
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] !== true) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: () => import(
  /* webpackPrefetch: true, webpackChunkName: \\"ChunkA\\" */
  './ModA'),

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\\"./ModA\\");
    }

    return eval('require.resolve')(\\"./ModA\\");
  }

});"
`;

exports[`plugin simple import without "webpackChunkName" comment should add it 1`] = `
"loadable({
  resolved: {},

  chunkName() {
    return \\"ModA\\";
  },

  isReady(props) {
    const key = this.resolve(props);

    if (this.resolved[key] !== true) {
      return false;
    }

    if (typeof __webpack_modules__ !== 'undefined') {
      return !!__webpack_modules__[key];
    }

    return false;
  },

  importAsync: () => import(
  /* webpackChunkName: \\"ModA\\" */
  './ModA'),

  requireAsync(props) {
    const key = this.resolve(props);
    this.resolved[key] = false;
    return this.importAsync(props).then(resolved => {
      this.resolved[key] = true;
      return resolved;
    });
  },

  requireSync(props) {
    const id = this.resolve(props);

    if (typeof __webpack_require__ !== 'undefined') {
      return __webpack_require__(id);
    }

    return eval('module.require')(id);
  },

  resolve() {
    if (require.resolveWeak) {
      return require.resolveWeak(\\"./ModA\\");
    }

    return eval('require.resolve')(\\"./ModA\\");
  }

});"
`;
